# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 13921996477721992090,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[6].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-25.cx3.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Fri 21 May 10:23:46 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 13921996477721992090,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[6].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-25.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.00000375 <= 1.0,
        ),
        seed: 13921996477721992090,
        algorithm: SkippingGillespie(
            MonolithicArguments {
                parallelism_mode: Optimistic(
                    OptimisticParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 1000,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3586638[6].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffe468c96b8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffe468c96d8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3586638[6].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 13.322942669s
 - execution: 93.299147269s
 - cleanup: 1.615255ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 18578.621097741507 after 925646124 steps.

# mpiexec: finished at Fri 21 May 10:25:40 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.005992091405966026,
                ),
                max_time: PositiveF64(
                    0.0 < 12296.532292229456,
                ),
                length: 542,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.04946381834145997,
                ),
                max_time: PositiveF64(
                    0.0 < 10855.390922581815,
                ),
                length: 501,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.26404624723357306,
                ),
                max_time: PositiveF64(
                    0.0 < 16425.987951960346,
                ),
                length: 512,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4763488795442741,
                ),
                max_time: PositiveF64(
                    0.0 < 12884.625886525773,
                ),
                length: 676,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.512736140185132,
                ),
                max_time: PositiveF64(
                    0.0 < 13370.351599401392,
                ),
                length: 472,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.635141397502995,
                ),
                max_time: PositiveF64(
                    0.0 < 18578.621097741507,
                ),
                length: 511,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8834542393359031,
                ),
                max_time: PositiveF64(
                    0.0 < 11019.253701653404,
                ),
                length: 515,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.043886240856229,
                ),
                max_time: PositiveF64(
                    0.0 < 14873.84736152687,
                ),
                length: 499,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0512684592760462,
                ),
                max_time: PositiveF64(
                    0.0 < 14701.577505140296,
                ),
                length: 473,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.5088786251942046,
                ),
                max_time: PositiveF64(
                    0.0 < 11157.276532774153,
                ),
                length: 549,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8767772668753555,
                ),
                max_time: PositiveF64(
                    0.0 < 14410.33541252519,
                ),
                length: 525,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9330730338011286,
                ),
                max_time: PositiveF64(
                    0.0 < 11529.922532366118,
                ),
                length: 498,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.0010085164480342,
                ),
                max_time: PositiveF64(
                    0.0 < 12929.521054402892,
                ),
                length: 513,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.169573934180484,
                ),
                max_time: PositiveF64(
                    0.0 < 9438.21160460713,
                ),
                length: 437,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.513129396664123,
                ),
                max_time: PositiveF64(
                    0.0 < 13220.574663762562,
                ),
                length: 503,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.6155253207995006,
                ),
                max_time: PositiveF64(
                    0.0 < 10431.037711546685,
                ),
                length: 310,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.2150410568538743,
                ),
                max_time: PositiveF64(
                    0.0 < 12265.06911915638,
                ),
                length: 502,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.568790368383144,
                ),
                max_time: PositiveF64(
                    0.0 < 14566.33352655846,
                ),
                length: 689,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.9435819813387454,
                ),
                max_time: PositiveF64(
                    0.0 < 14373.739066297872,
                ),
                length: 485,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.335449757640574,
                ),
                max_time: PositiveF64(
                    0.0 < 11757.00585606297,
                ),
                length: 521,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.651214205425676,
                ),
                max_time: PositiveF64(
                    0.0 < 17056.363469398988,
                ),
                length: 468,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.477862226552448,
                ),
                max_time: PositiveF64(
                    0.0 < 12258.739607994594,
                ),
                length: 440,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.584620136874067,
                ),
                max_time: PositiveF64(
                    0.0 < 10920.389242769332,
                ),
                length: 419,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.589551610825159,
                ),
                max_time: PositiveF64(
                    0.0 < 14977.985653319856,
                ),
                length: 393,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.778222981790545,
                ),
                max_time: PositiveF64(
                    0.0 < 11853.335202861208,
                ),
                length: 486,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.120806361620913,
                ),
                max_time: PositiveF64(
                    0.0 < 13561.72195254265,
                ),
                length: 499,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.768639335651754,
                ),
                max_time: PositiveF64(
                    0.0 < 13975.446460149147,
                ),
                length: 466,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 8.582025967824181,
                ),
                max_time: PositiveF64(
                    0.0 < 17362.08983684246,
                ),
                length: 491,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 9.200548964394269,
                ),
                max_time: PositiveF64(
                    0.0 < 13136.041978443764,
                ),
                length: 442,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 12.095410143423532,
                ),
                max_time: PositiveF64(
                    0.0 < 12867.892264237957,
                ),
                length: 531,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 12.758073857121019,
                ),
                max_time: PositiveF64(
                    0.0 < 9575.666006856658,
                ),
                length: 478,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 14.013413684365634,
                ),
                max_time: PositiveF64(
                    0.0 < 12056.412720412061,
                ),
                length: 420,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 6.56µs
 - execution: 8.011372ms
 - cleanup: 356.169µs
INFO  The simulation resulted in a biodiversity of 15766 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :        31 (peak)  25.94 (ave)

============================================
