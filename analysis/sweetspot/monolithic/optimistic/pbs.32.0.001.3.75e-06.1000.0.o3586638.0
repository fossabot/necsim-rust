# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 14278203807445478839,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-16.cx3.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Fri 21 May 10:23:45 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 14278203807445478839,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-16.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.00000375 <= 1.0,
        ),
        seed: 14278203807445478839,
        algorithm: SkippingGillespie(
            MonolithicArguments {
                parallelism_mode: Optimistic(
                    OptimisticParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 1000,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3586638[0].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffca6fb5cb8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffca6fb5cd8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3586638[0].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 4.821266875s
 - execution: 69.882246842s
 - cleanup: 897.13Âµs

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 21303.19693114744 after 923243979 steps.

# mpiexec: finished at Fri 21 May 10:25:08 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.06024276196631017,
                ),
                max_time: PositiveF64(
                    0.0 < 11737.269649055863,
                ),
                length: 487,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18678791173068257,
                ),
                max_time: PositiveF64(
                    0.0 < 14850.147025457689,
                ),
                length: 463,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.23424463530434206,
                ),
                max_time: PositiveF64(
                    0.0 < 14791.860774661029,
                ),
                length: 509,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7623071715290931,
                ),
                max_time: PositiveF64(
                    0.0 < 13731.396909774756,
                ),
                length: 544,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7866735264364338,
                ),
                max_time: PositiveF64(
                    0.0 < 9918.431756794645,
                ),
                length: 507,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.95034069455192,
                ),
                max_time: PositiveF64(
                    0.0 < 8204.272276056632,
                ),
                length: 296,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.095993372526401,
                ),
                max_time: PositiveF64(
                    0.0 < 16332.244333998848,
                ),
                length: 531,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1144361493937691,
                ),
                max_time: PositiveF64(
                    0.0 < 11439.876254021316,
                ),
                length: 500,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2823562988836932,
                ),
                max_time: PositiveF64(
                    0.0 < 13052.28097442345,
                ),
                length: 502,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3681149508523291,
                ),
                max_time: PositiveF64(
                    0.0 < 14850.457983543309,
                ),
                length: 504,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.638163473708639,
                ),
                max_time: PositiveF64(
                    0.0 < 14619.72897985118,
                ),
                length: 485,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.782297171351157,
                ),
                max_time: PositiveF64(
                    0.0 < 10799.78651853838,
                ),
                length: 422,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9731996971708137,
                ),
                max_time: PositiveF64(
                    0.0 < 10523.33880478754,
                ),
                length: 457,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.3908885253054213,
                ),
                max_time: PositiveF64(
                    0.0 < 9883.440415179273,
                ),
                length: 429,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.4074321339482294,
                ),
                max_time: PositiveF64(
                    0.0 < 16992.61431229217,
                ),
                length: 442,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.5551027342378765,
                ),
                max_time: PositiveF64(
                    0.0 < 12458.878476037888,
                ),
                length: 438,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.6179210204782577,
                ),
                max_time: PositiveF64(
                    0.0 < 18526.556306754173,
                ),
                length: 737,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.3550960302944564,
                ),
                max_time: PositiveF64(
                    0.0 < 14254.874682622427,
                ),
                length: 516,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.4012072250777585,
                ),
                max_time: PositiveF64(
                    0.0 < 21287.1069888547,
                ),
                length: 532,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.671260114525773,
                ),
                max_time: PositiveF64(
                    0.0 < 12671.38537347139,
                ),
                length: 514,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.866972725246568,
                ),
                max_time: PositiveF64(
                    0.0 < 11983.098898934653,
                ),
                length: 657,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.0929595462429305,
                ),
                max_time: PositiveF64(
                    0.0 < 13981.307632524402,
                ),
                length: 455,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.070826087622602,
                ),
                max_time: PositiveF64(
                    0.0 < 11230.28606259267,
                ),
                length: 495,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.094458860578596,
                ),
                max_time: PositiveF64(
                    0.0 < 11779.071881676864,
                ),
                length: 471,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.00377584060511,
                ),
                max_time: PositiveF64(
                    0.0 < 12930.494359350298,
                ),
                length: 408,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.782402163288648,
                ),
                max_time: PositiveF64(
                    0.0 < 13614.162583340309,
                ),
                length: 500,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 8.199372217698713,
                ),
                max_time: PositiveF64(
                    0.0 < 12844.496185228716,
                ),
                length: 496,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 9.026821759221168,
                ),
                max_time: PositiveF64(
                    0.0 < 14500.215474260714,
                ),
                length: 488,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 11.132656381875007,
                ),
                max_time: PositiveF64(
                    0.0 < 11853.485342380336,
                ),
                length: 562,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 11.343773100666507,
                ),
                max_time: PositiveF64(
                    0.0 < 21303.19693114744,
                ),
                length: 423,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 13.49001756623183,
                ),
                max_time: PositiveF64(
                    0.0 < 11742.618941138993,
                ),
                length: 507,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 14.802340461863068,
                ),
                max_time: PositiveF64(
                    0.0 < 15831.423389078389,
                ),
                length: 480,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 460ns
 - execution: 2.472878ms
 - cleanup: 118.832Âµs
INFO  The simulation resulted in a biodiversity of 15757 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :        15 (peak)  25.57 (ave)

============================================
