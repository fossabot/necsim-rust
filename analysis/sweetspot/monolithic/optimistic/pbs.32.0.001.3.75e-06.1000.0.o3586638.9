# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 16312145678218147358,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[9].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-2-7.cx3.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Fri 21 May 10:23:46 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 16312145678218147358,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[9].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-2-7.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.00000375 <= 1.0,
        ),
        seed: 16312145678218147358,
        algorithm: SkippingGillespie(
            MonolithicArguments {
                parallelism_mode: Optimistic(
                    OptimisticParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 1000,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3586638[9].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffed910f6d8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffed910f6f8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3586638[9].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 2.433907031s
 - execution: 60.259518946s
 - cleanup: 1.677831ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 20545.526969866634 after 932440931 steps.

# mpiexec: finished at Fri 21 May 10:25:02 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.011866879796271402,
                ),
                max_time: PositiveF64(
                    0.0 < 10779.726885900089,
                ),
                length: 437,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18799687813013669,
                ),
                max_time: PositiveF64(
                    0.0 < 12226.717360568882,
                ),
                length: 453,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5608301113000581,
                ),
                max_time: PositiveF64(
                    0.0 < 12113.624529267863,
                ),
                length: 523,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6417934244422723,
                ),
                max_time: PositiveF64(
                    0.0 < 18458.320701661978,
                ),
                length: 483,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6863899538403845,
                ),
                max_time: PositiveF64(
                    0.0 < 11746.322918288051,
                ),
                length: 498,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6898521215259298,
                ),
                max_time: PositiveF64(
                    0.0 < 12845.991277993477,
                ),
                length: 497,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7825225474821089,
                ),
                max_time: PositiveF64(
                    0.0 < 12635.174797743348,
                ),
                length: 524,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8304493901251632,
                ),
                max_time: PositiveF64(
                    0.0 < 11245.631043166724,
                ),
                length: 462,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8645233754637502,
                ),
                max_time: PositiveF64(
                    0.0 < 15380.046795312162,
                ),
                length: 415,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.058276153727952,
                ),
                max_time: PositiveF64(
                    0.0 < 15324.63969513656,
                ),
                length: 468,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.077884955798693,
                ),
                max_time: PositiveF64(
                    0.0 < 14416.63884314454,
                ),
                length: 468,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2569369134435084,
                ),
                max_time: PositiveF64(
                    0.0 < 14252.255069771227,
                ),
                length: 705,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2999639728275978,
                ),
                max_time: PositiveF64(
                    0.0 < 15050.178406425528,
                ),
                length: 515,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3482625338995442,
                ),
                max_time: PositiveF64(
                    0.0 < 13155.106859082916,
                ),
                length: 474,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.6104689503392997,
                ),
                max_time: PositiveF64(
                    0.0 < 14218.789192305587,
                ),
                length: 542,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.6490927206944686,
                ),
                max_time: PositiveF64(
                    0.0 < 12432.622878034681,
                ),
                length: 449,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7206078207186888,
                ),
                max_time: PositiveF64(
                    0.0 < 14594.78255843114,
                ),
                length: 554,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8702544363138938,
                ),
                max_time: PositiveF64(
                    0.0 < 13921.414654279772,
                ),
                length: 501,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.065414788182302,
                ),
                max_time: PositiveF64(
                    0.0 < 13030.697441289236,
                ),
                length: 477,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.1289001627585167,
                ),
                max_time: PositiveF64(
                    0.0 < 13753.25088049132,
                ),
                length: 522,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.2759932127678635,
                ),
                max_time: PositiveF64(
                    0.0 < 12700.660892196009,
                ),
                length: 509,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.1005814662989017,
                ),
                max_time: PositiveF64(
                    0.0 < 9720.941549929295,
                ),
                length: 441,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.128794080915749,
                ),
                max_time: PositiveF64(
                    0.0 < 12218.7196536557,
                ),
                length: 438,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.482320557337634,
                ),
                max_time: PositiveF64(
                    0.0 < 10442.510719869924,
                ),
                length: 510,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.148418756226537,
                ),
                max_time: PositiveF64(
                    0.0 < 13058.5115090855,
                ),
                length: 540,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.386225212467099,
                ),
                max_time: PositiveF64(
                    0.0 < 14024.577543662072,
                ),
                length: 500,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.933274425688112,
                ),
                max_time: PositiveF64(
                    0.0 < 12672.846189416241,
                ),
                length: 300,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.340317349290424,
                ),
                max_time: PositiveF64(
                    0.0 < 20545.526969866634,
                ),
                length: 685,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 8.041890733313997,
                ),
                max_time: PositiveF64(
                    0.0 < 14578.57916646288,
                ),
                length: 489,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 14.214186417115043,
                ),
                max_time: PositiveF64(
                    0.0 < 10261.690667198773,
                ),
                length: 464,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 17.659676316388364,
                ),
                max_time: PositiveF64(
                    0.0 < 11891.592598725723,
                ),
                length: 503,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 17.847175054492624,
                ),
                max_time: PositiveF64(
                    0.0 < 14534.693781969212,
                ),
                length: 411,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 400ns
 - execution: 2.31262ms
 - cleanup: 194.356µs
INFO  The simulation resulted in a biodiversity of 15757 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :        24 (peak)  24.56 (ave)

============================================
