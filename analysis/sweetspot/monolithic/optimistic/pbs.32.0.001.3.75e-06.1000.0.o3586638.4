# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 16166792951496809509,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[4].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-22.cx3.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Fri 21 May 10:23:45 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 0.001,
        sample: 3.75e-06,
        seed: 16166792951496809509,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:1000.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3586638[4].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-22.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.00000375 <= 1.0,
        ),
        seed: 16166792951496809509,
        algorithm: SkippingGillespie(
            MonolithicArguments {
                parallelism_mode: Optimistic(
                    OptimisticParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 1000,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3586638[4].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffebfd50408; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffebfd50428; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3586638[4].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 2.215608528s
 - execution: 77.954733825s
 - cleanup: 1.910927ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 18363.149876991138 after 929813318 steps.

# mpiexec: finished at Fri 21 May 10:25:18 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2280368810177776,
                ),
                max_time: PositiveF64(
                    0.0 < 13578.032873964303,
                ),
                length: 498,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3560194987297473,
                ),
                max_time: PositiveF64(
                    0.0 < 12047.57970360062,
                ),
                length: 452,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5585307367226215,
                ),
                max_time: PositiveF64(
                    0.0 < 13299.634604730056,
                ),
                length: 469,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6112766491616886,
                ),
                max_time: PositiveF64(
                    0.0 < 15312.728006776988,
                ),
                length: 730,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7208598107059342,
                ),
                max_time: PositiveF64(
                    0.0 < 11532.129275865811,
                ),
                length: 539,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7263741491110959,
                ),
                max_time: PositiveF64(
                    0.0 < 13893.42474450421,
                ),
                length: 487,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8486421842893795,
                ),
                max_time: PositiveF64(
                    0.0 < 13391.052082462465,
                ),
                length: 545,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8522018417465912,
                ),
                max_time: PositiveF64(
                    0.0 < 13210.302256980038,
                ),
                length: 454,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2375264580277923,
                ),
                max_time: PositiveF64(
                    0.0 < 10245.644512216779,
                ),
                length: 521,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.429106013416682,
                ),
                max_time: PositiveF64(
                    0.0 < 12829.303471750682,
                ),
                length: 450,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4314344543000699,
                ),
                max_time: PositiveF64(
                    0.0 < 14367.121675208153,
                ),
                length: 438,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.6326429095656012,
                ),
                max_time: PositiveF64(
                    0.0 < 14495.221748430895,
                ),
                length: 503,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.783562408420289,
                ),
                max_time: PositiveF64(
                    0.0 < 16546.707337443153,
                ),
                length: 419,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9729270793912737,
                ),
                max_time: PositiveF64(
                    0.0 < 14811.58674296215,
                ),
                length: 549,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.0932018610892005,
                ),
                max_time: PositiveF64(
                    0.0 < 10128.6403454252,
                ),
                length: 488,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.3107177424694774,
                ),
                max_time: PositiveF64(
                    0.0 < 16794.999288830648,
                ),
                length: 460,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.8114230929848403,
                ),
                max_time: PositiveF64(
                    0.0 < 13755.897712674603,
                ),
                length: 492,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.8551597799987194,
                ),
                max_time: PositiveF64(
                    0.0 < 13324.42396503531,
                ),
                length: 479,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.250009711138911,
                ),
                max_time: PositiveF64(
                    0.0 < 13939.018978769871,
                ),
                length: 486,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.255899721626612,
                ),
                max_time: PositiveF64(
                    0.0 < 17391.8916768455,
                ),
                length: 487,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.2593561521559375,
                ),
                max_time: PositiveF64(
                    0.0 < 17968.103285941004,
                ),
                length: 532,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.5307728543441366,
                ),
                max_time: PositiveF64(
                    0.0 < 9470.572411335317,
                ),
                length: 308,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.7466251220127624,
                ),
                max_time: PositiveF64(
                    0.0 < 18363.149876991138,
                ),
                length: 513,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.771373978045898,
                ),
                max_time: PositiveF64(
                    0.0 < 17283.095298264016,
                ),
                length: 508,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.411314503795098,
                ),
                max_time: PositiveF64(
                    0.0 < 12269.174226508341,
                ),
                length: 435,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.775380712921888,
                ),
                max_time: PositiveF64(
                    0.0 < 14709.814238723207,
                ),
                length: 496,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.962277381889929,
                ),
                max_time: PositiveF64(
                    0.0 < 13782.330693197877,
                ),
                length: 432,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 8.015302873664586,
                ),
                max_time: PositiveF64(
                    0.0 < 12649.995927760416,
                ),
                length: 489,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 9.735429368316888,
                ),
                max_time: PositiveF64(
                    0.0 < 14375.151376802483,
                ),
                length: 456,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 10.354716401395972,
                ),
                max_time: PositiveF64(
                    0.0 < 12224.401287707731,
                ),
                length: 430,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 11.122576412151739,
                ),
                max_time: PositiveF64(
                    0.0 < 10052.757264645543,
                ),
                length: 507,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 13.304058684574404,
                ),
                max_time: PositiveF64(
                    0.0 < 12124.482929592174,
                ),
                length: 700,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 800ns
 - execution: 6.323007ms
 - cleanup: 27.831µs
INFO  The simulation resulted in a biodiversity of 15752 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :        37 (peak)  27.49 (ave)

============================================
