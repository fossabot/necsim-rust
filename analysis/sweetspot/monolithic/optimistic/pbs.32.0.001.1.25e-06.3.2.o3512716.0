# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: RDMA network found -- using rdma+shared memory (FI_VERBS_IFACE=ib0)
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 0.001,
        sample: 1.25e-06,
        seed: 10544899520467767106,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:3.2)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3512716[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-134-5-20.cx1.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Wed 12 May 10:15:11 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 0.001,
        sample: 1.25e-06,
        seed: 10544899520467767106,

        algorithm: SkippingGillespie(parallelism_mode:Optimistic(delta_sync:3.2)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3512716[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-134-5-20.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.00000125 <= 1.0,
        ),
        seed: 10544899520467767106,
        algorithm: SkippingGillespie(
            MonolithicArguments {
                parallelism_mode: Optimistic(
                    OptimisticParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 3.2,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3512716[0].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffc8c7c67e8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffc8c7c6808; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3512716[0].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 3.165377156s
 - execution: 39.330030516s
 - cleanup: 1.852303ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 18570.915468365347 after 742333 steps.

# mpiexec: finished at Wed 12 May 10:15:58 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.171484128176834,
                ),
                max_time: PositiveF64(
                    0.0 < 14275.199800182603,
                ),
                length: 149,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.814788262834595,
                ),
                max_time: PositiveF64(
                    0.0 < 15583.990411261415,
                ),
                length: 150,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.5632215417961697,
                ),
                max_time: PositiveF64(
                    0.0 < 10685.407373287318,
                ),
                length: 159,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.018928332121548,
                ),
                max_time: PositiveF64(
                    0.0 < 10333.514623733145,
                ),
                length: 130,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.1799823827893055,
                ),
                max_time: PositiveF64(
                    0.0 < 12883.975695188006,
                ),
                length: 160,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.415040224211084,
                ),
                max_time: PositiveF64(
                    0.0 < 8275.393133663227,
                ),
                length: 170,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.0887355158878265,
                ),
                max_time: PositiveF64(
                    0.0 < 11141.09156200697,
                ),
                length: 152,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.444108733940386,
                ),
                max_time: PositiveF64(
                    0.0 < 8105.992899154095,
                ),
                length: 153,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.596799298183756,
                ),
                max_time: PositiveF64(
                    0.0 < 8639.153623671009,
                ),
                length: 104,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.634741931962866,
                ),
                max_time: PositiveF64(
                    0.0 < 10683.940454055471,
                ),
                length: 189,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.447493624502037,
                ),
                max_time: PositiveF64(
                    0.0 < 9119.851527481656,
                ),
                length: 136,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.735947355272379,
                ),
                max_time: PositiveF64(
                    0.0 < 11684.223153852528,
                ),
                length: 186,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.171584039443288,
                ),
                max_time: PositiveF64(
                    0.0 < 12059.360291557075,
                ),
                length: 160,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.175163913693788,
                ),
                max_time: PositiveF64(
                    0.0 < 8906.0729915583,
                ),
                length: 151,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 8.800226050509043,
                ),
                max_time: PositiveF64(
                    0.0 < 14811.325120125444,
                ),
                length: 169,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 9.51689482738087,
                ),
                max_time: PositiveF64(
                    0.0 < 14261.307326919847,
                ),
                length: 139,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 9.75369188062686,
                ),
                max_time: PositiveF64(
                    0.0 < 13888.040417856684,
                ),
                length: 217,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 10.149601521610176,
                ),
                max_time: PositiveF64(
                    0.0 < 9275.137181291528,
                ),
                length: 173,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 10.630037792572752,
                ),
                max_time: PositiveF64(
                    0.0 < 7459.7011840723,
                ),
                length: 175,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 11.621030567152584,
                ),
                max_time: PositiveF64(
                    0.0 < 13468.340589266962,
                ),
                length: 169,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 13.103645483190814,
                ),
                max_time: PositiveF64(
                    0.0 < 10811.915105091457,
                ),
                length: 153,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 14.007055405795562,
                ),
                max_time: PositiveF64(
                    0.0 < 10584.99438462095,
                ),
                length: 196,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 16.279110739440192,
                ),
                max_time: PositiveF64(
                    0.0 < 9858.7181956265,
                ),
                length: 153,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 16.402754610671938,
                ),
                max_time: PositiveF64(
                    0.0 < 11204.569428160987,
                ),
                length: 171,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 17.798219532372578,
                ),
                max_time: PositiveF64(
                    0.0 < 13191.231747085336,
                ),
                length: 156,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 17.90265620872603,
                ),
                max_time: PositiveF64(
                    0.0 < 15213.916370295368,
                ),
                length: 166,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 24.897114018862244,
                ),
                max_time: PositiveF64(
                    0.0 < 12500.102780124595,
                ),
                length: 165,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 26.528156037118542,
                ),
                max_time: PositiveF64(
                    0.0 < 13464.650503933937,
                ),
                length: 158,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 28.30935153681365,
                ),
                max_time: PositiveF64(
                    0.0 < 18570.915468365347,
                ),
                length: 175,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 28.55370840172087,
                ),
                max_time: PositiveF64(
                    0.0 < 8403.095027106881,
                ),
                length: 231,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 31.23416757849713,
                ),
                max_time: PositiveF64(
                    0.0 < 11492.71376928094,
                ),
                length: 165,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 33.03825631020207,
                ),
                max_time: PositiveF64(
                    0.0 < 6757.968584385921,
                ),
                length: 186,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 503ns
 - execution: 861.129µs
 - cleanup: 9.381µs
INFO  The simulation resulted in a biodiversity of 5266 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :         2 (peak)  28.68 (ave)

============================================
