# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 16119551893704603987,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[7].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-101-11-2.cx1.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 17:43:22 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 16119551893704603987,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[7].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-101-11-2.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 16119551893704603987,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Landscape,
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541394[7].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffeb6b08ce8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffeb6b08d08; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541394[7].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 17.905858264s
 - execution: 623.573112859s
 - cleanup: 62.294216ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 12977918.140061915 after 33295524175 steps.

# mpiexec: finished at Sun 16 May 17:54:10 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.002936834607134564,
                ),
                max_time: PositiveF64(
                    0.0 < 4931192.5856240345,
                ),
                length: 668,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.004679879847256263,
                ),
                max_time: PositiveF64(
                    0.0 < 2786435.594517711,
                ),
                length: 556,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.009170326386783945,
                ),
                max_time: PositiveF64(
                    0.0 < 6273176.752748226,
                ),
                length: 549,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.04394059312117937,
                ),
                max_time: PositiveF64(
                    0.0 < 5488550.979596502,
                ),
                length: 550,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.045663483271140004,
                ),
                max_time: PositiveF64(
                    0.0 < 8399951.581156686,
                ),
                length: 562,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.06000459401784908,
                ),
                max_time: PositiveF64(
                    0.0 < 10391350.760601917,
                ),
                length: 421,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.07003371203350306,
                ),
                max_time: PositiveF64(
                    0.0 < 8323050.321524686,
                ),
                length: 564,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.07097900351368569,
                ),
                max_time: PositiveF64(
                    0.0 < 6480782.631699732,
                ),
                length: 607,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.10233416343881241,
                ),
                max_time: PositiveF64(
                    0.0 < 10750990.930583145,
                ),
                length: 1241,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.10855703959634955,
                ),
                max_time: PositiveF64(
                    0.0 < 9754409.707320793,
                ),
                length: 854,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1201538718402626,
                ),
                max_time: PositiveF64(
                    0.0 < 10550443.86678164,
                ),
                length: 789,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.12310794430639871,
                ),
                max_time: PositiveF64(
                    0.0 < 8079319.53074927,
                ),
                length: 751,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.12692095429726136,
                ),
                max_time: PositiveF64(
                    0.0 < 7045352.488201016,
                ),
                length: 820,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1804118557955361,
                ),
                max_time: PositiveF64(
                    0.0 < 6769520.509397111,
                ),
                length: 706,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.22264490901214873,
                ),
                max_time: PositiveF64(
                    0.0 < 9271677.124597345,
                ),
                length: 590,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2343441095874319,
                ),
                max_time: PositiveF64(
                    0.0 < 3243124.815815237,
                ),
                length: 572,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.24088247328651624,
                ),
                max_time: PositiveF64(
                    0.0 < 3749902.9537883336,
                ),
                length: 656,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2788354242330249,
                ),
                max_time: PositiveF64(
                    0.0 < 7316597.78524578,
                ),
                length: 664,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.34068776295644376,
                ),
                max_time: PositiveF64(
                    0.0 < 10017273.539666744,
                ),
                length: 1098,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.35720261860190794,
                ),
                max_time: PositiveF64(
                    0.0 < 5062647.110147109,
                ),
                length: 377,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.39709394765659156,
                ),
                max_time: PositiveF64(
                    0.0 < 7557668.086528081,
                ),
                length: 894,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4022888785426495,
                ),
                max_time: PositiveF64(
                    0.0 < 6533674.21129824,
                ),
                length: 779,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4173093604036233,
                ),
                max_time: PositiveF64(
                    0.0 < 5542017.709354901,
                ),
                length: 522,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.485441338636174,
                ),
                max_time: PositiveF64(
                    0.0 < 11326429.661452021,
                ),
                length: 662,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5476139919438672,
                ),
                max_time: PositiveF64(
                    0.0 < 12239006.221744006,
                ),
                length: 855,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5565115352074048,
                ),
                max_time: PositiveF64(
                    0.0 < 6486695.157297883,
                ),
                length: 744,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5734487549346092,
                ),
                max_time: PositiveF64(
                    0.0 < 3530820.146203112,
                ),
                length: 619,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5990246614279748,
                ),
                max_time: PositiveF64(
                    0.0 < 10916600.244021261,
                ),
                length: 611,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6029179835526577,
                ),
                max_time: PositiveF64(
                    0.0 < 4677454.836290728,
                ),
                length: 593,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6101099631340527,
                ),
                max_time: PositiveF64(
                    0.0 < 2977480.277969894,
                ),
                length: 629,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6640456074019432,
                ),
                max_time: PositiveF64(
                    0.0 < 12977918.140061915,
                ),
                length: 828,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7239155482314832,
                ),
                max_time: PositiveF64(
                    0.0 < 9571997.714040147,
                ),
                length: 712,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7568924699074411,
                ),
                max_time: PositiveF64(
                    0.0 < 4134877.2997033475,
                ),
                length: 585,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.784199669538912,
                ),
                max_time: PositiveF64(
                    0.0 < 10092082.099124296,
                ),
                length: 778,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8599666948273665,
                ),
                max_time: PositiveF64(
                    0.0 < 7870752.261370308,
                ),
                length: 710,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.012579293981584,
                ),
                max_time: PositiveF64(
                    0.0 < 12460202.69215167,
                ),
                length: 995,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0690746718251907,
                ),
                max_time: PositiveF64(
                    0.0 < 8340731.199674761,
                ),
                length: 726,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0818582489719395,
                ),
                max_time: PositiveF64(
                    0.0 < 8859404.68426636,
                ),
                length: 755,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0850825891429752,
                ),
                max_time: PositiveF64(
                    0.0 < 12768554.298503544,
                ),
                length: 700,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2164364873713345,
                ),
                max_time: PositiveF64(
                    0.0 < 9670324.7448022,
                ),
                length: 797,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2425199297534806,
                ),
                max_time: PositiveF64(
                    0.0 < 11762720.879043458,
                ),
                length: 885,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3182676202644132,
                ),
                max_time: PositiveF64(
                    0.0 < 5706345.603582715,
                ),
                length: 555,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4194542242026327,
                ),
                max_time: PositiveF64(
                    0.0 < 10372579.34392482,
                ),
                length: 814,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4298111103783864,
                ),
                max_time: PositiveF64(
                    0.0 < 5589526.675160771,
                ),
                length: 659,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.682952770993635,
                ),
                max_time: PositiveF64(
                    0.0 < 3794278.010555783,
                ),
                length: 617,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7978649277809478,
                ),
                max_time: PositiveF64(
                    0.0 < 8216920.600108232,
                ),
                length: 779,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.201908176169887,
                ),
                max_time: PositiveF64(
                    0.0 < 6050079.8521631975,
                ),
                length: 679,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.2084909479430044,
                ),
                max_time: PositiveF64(
                    0.0 < 4488763.515990784,
                ),
                length: 692,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 458ns
 - execution: 5.373443ms
 - cleanup: 15.154µs
INFO  The simulation resulted in a biodiversity of 31517 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        53 (peak)  46.76 (ave)

============================================
