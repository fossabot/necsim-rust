# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 3704323151320242767,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[4].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-15.cx3.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 17:27:29 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 3704323151320242767,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[4].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-15.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 3704323151320242767,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Landscape,
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541394[4].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7fffb7c77468; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7fffb7c77488; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541394[4].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 14.300774729s
 - execution: 476.382842429s
 - cleanup: 167.529939ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 13478118.065020235 after 33697966872 steps.

# mpiexec: finished at Sun 16 May 17:35:54 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.01507515108795654,
                ),
                max_time: PositiveF64(
                    0.0 < 6094130.6846314715,
                ),
                length: 1017,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.042491743223681766,
                ),
                max_time: PositiveF64(
                    0.0 < 7712891.651973644,
                ),
                length: 732,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.06083462165045761,
                ),
                max_time: PositiveF64(
                    0.0 < 4706522.34902158,
                ),
                length: 411,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0821574757357697,
                ),
                max_time: PositiveF64(
                    0.0 < 3201631.667928852,
                ),
                length: 384,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.08842360832557183,
                ),
                max_time: PositiveF64(
                    0.0 < 3149428.66224414,
                ),
                length: 657,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.09049044688412544,
                ),
                max_time: PositiveF64(
                    0.0 < 7533996.73224064,
                ),
                length: 737,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1097844411735922,
                ),
                max_time: PositiveF64(
                    0.0 < 8219783.020637124,
                ),
                length: 1332,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.15601564772626042,
                ),
                max_time: PositiveF64(
                    0.0 < 11550198.406374441,
                ),
                length: 856,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.252611515918282,
                ),
                max_time: PositiveF64(
                    0.0 < 5938399.748801855,
                ),
                length: 583,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2863907375668524,
                ),
                max_time: PositiveF64(
                    0.0 < 7360336.308646761,
                ),
                length: 536,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2918551596197785,
                ),
                max_time: PositiveF64(
                    0.0 < 5687519.199448243,
                ),
                length: 572,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.30545414904840706,
                ),
                max_time: PositiveF64(
                    0.0 < 3875629.6515634647,
                ),
                length: 632,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3477707891241748,
                ),
                max_time: PositiveF64(
                    0.0 < 4996828.720068828,
                ),
                length: 592,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3479204219786567,
                ),
                max_time: PositiveF64(
                    0.0 < 6997229.038590464,
                ),
                length: 839,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3692111058606682,
                ),
                max_time: PositiveF64(
                    0.0 < 7156036.525764307,
                ),
                length: 774,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.38414292069697265,
                ),
                max_time: PositiveF64(
                    0.0 < 12330607.851459052,
                ),
                length: 775,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4476556323413383,
                ),
                max_time: PositiveF64(
                    0.0 < 11096901.169891145,
                ),
                length: 800,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4896629823168832,
                ),
                max_time: PositiveF64(
                    0.0 < 11167799.499022622,
                ),
                length: 735,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4951870444101749,
                ),
                max_time: PositiveF64(
                    0.0 < 6258368.409403187,
                ),
                length: 844,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.49768269784111774,
                ),
                max_time: PositiveF64(
                    0.0 < 4786130.093827936,
                ),
                length: 592,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.49795621297657267,
                ),
                max_time: PositiveF64(
                    0.0 < 8694394.856247203,
                ),
                length: 721,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5206055395125135,
                ),
                max_time: PositiveF64(
                    0.0 < 4832378.6716292985,
                ),
                length: 496,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.544551470185576,
                ),
                max_time: PositiveF64(
                    0.0 < 13196304.82384973,
                ),
                length: 767,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5457356326385259,
                ),
                max_time: PositiveF64(
                    0.0 < 12311266.028767068,
                ),
                length: 1175,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5832160448192116,
                ),
                max_time: PositiveF64(
                    0.0 < 6254667.158150297,
                ),
                length: 529,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5985922873929126,
                ),
                max_time: PositiveF64(
                    0.0 < 10090178.538662687,
                ),
                length: 966,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6189322776869244,
                ),
                max_time: PositiveF64(
                    0.0 < 10175136.62324453,
                ),
                length: 724,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6465528092409214,
                ),
                max_time: PositiveF64(
                    0.0 < 12688278.540699257,
                ),
                length: 761,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6722225563818003,
                ),
                max_time: PositiveF64(
                    0.0 < 7534420.9320765445,
                ),
                length: 612,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7172427793433076,
                ),
                max_time: PositiveF64(
                    0.0 < 5551468.515578569,
                ),
                length: 566,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7188674304954914,
                ),
                max_time: PositiveF64(
                    0.0 < 5060584.172574931,
                ),
                length: 587,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7719528002127334,
                ),
                max_time: PositiveF64(
                    0.0 < 13478118.065020235,
                ),
                length: 731,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8125098699257474,
                ),
                max_time: PositiveF64(
                    0.0 < 3912390.403099825,
                ),
                length: 538,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8296693537535034,
                ),
                max_time: PositiveF64(
                    0.0 < 9623432.756901352,
                ),
                length: 806,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8434738219658597,
                ),
                max_time: PositiveF64(
                    0.0 < 9320523.874133075,
                ),
                length: 678,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9415128882523869,
                ),
                max_time: PositiveF64(
                    0.0 < 12003806.749330986,
                ),
                length: 731,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0573524469898201,
                ),
                max_time: PositiveF64(
                    0.0 < 7924649.775349986,
                ),
                length: 797,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0736625397850872,
                ),
                max_time: PositiveF64(
                    0.0 < 6897572.435448284,
                ),
                length: 830,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1639421878225926,
                ),
                max_time: PositiveF64(
                    0.0 < 3913766.3892777227,
                ),
                length: 826,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1813816825256032,
                ),
                max_time: PositiveF64(
                    0.0 < 6933287.587934564,
                ),
                length: 552,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3653695735508513,
                ),
                max_time: PositiveF64(
                    0.0 < 6648825.210475853,
                ),
                length: 715,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4670707437404724,
                ),
                max_time: PositiveF64(
                    0.0 < 6178462.584206135,
                ),
                length: 542,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.635071137873361,
                ),
                max_time: PositiveF64(
                    0.0 < 4814428.317767779,
                ),
                length: 597,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8863266673227423,
                ),
                max_time: PositiveF64(
                    0.0 < 8365767.482538492,
                ),
                length: 542,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.070236906774544,
                ),
                max_time: PositiveF64(
                    0.0 < 7148504.87926507,
                ),
                length: 848,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.3313545290832836,
                ),
                max_time: PositiveF64(
                    0.0 < 8433130.538061688,
                ),
                length: 566,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.596001143581829,
                ),
                max_time: PositiveF64(
                    0.0 < 6947122.731438412,
                ),
                length: 726,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.7126802272259494,
                ),
                max_time: PositiveF64(
                    0.0 < 9457633.057455076,
                ),
                length: 805,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 670ns
 - execution: 6.140828ms
 - cleanup: 315.33µs
INFO  The simulation resulted in a biodiversity of 31340 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        69 (peak)  45.64 (ave)

============================================
