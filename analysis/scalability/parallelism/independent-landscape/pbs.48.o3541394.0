# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 13871928933431465260,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-101-9-2.cx1.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 16:38:18 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 13871928933431465260,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Landscape,
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541394[0].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-101-9-2.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 13871928933431465260,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Landscape,
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541394[0].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffdcddd1bb8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffdcddd1bd8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541394[0].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 20.25595582s
 - execution: 619.626161256s
 - cleanup: 113.180565ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 18166581.81758005 after 33260277866 steps.

# mpiexec: finished at Sun 16 May 16:49:05 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0056893956807926305,
                ),
                max_time: PositiveF64(
                    0.0 < 18166581.81758005,
                ),
                length: 773,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.01878802120633094,
                ),
                max_time: PositiveF64(
                    0.0 < 5601962.097729083,
                ),
                length: 694,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.05207211430936853,
                ),
                max_time: PositiveF64(
                    0.0 < 7638442.901210251,
                ),
                length: 580,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.131857937027007,
                ),
                max_time: PositiveF64(
                    0.0 < 9228395.424420742,
                ),
                length: 784,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1480709390006658,
                ),
                max_time: PositiveF64(
                    0.0 < 10968549.767273689,
                ),
                length: 536,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18117386910927413,
                ),
                max_time: PositiveF64(
                    0.0 < 7961604.14075656,
                ),
                length: 806,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.19526270123933953,
                ),
                max_time: PositiveF64(
                    0.0 < 12370654.811172454,
                ),
                length: 673,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.22415350850532523,
                ),
                max_time: PositiveF64(
                    0.0 < 5555994.541589608,
                ),
                length: 382,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.22947641956743436,
                ),
                max_time: PositiveF64(
                    0.0 < 6876735.512665006,
                ),
                length: 644,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2339601123510331,
                ),
                max_time: PositiveF64(
                    0.0 < 3339041.0299977795,
                ),
                length: 553,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2611914843208789,
                ),
                max_time: PositiveF64(
                    0.0 < 7726483.140446791,
                ),
                length: 794,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.28391335053281797,
                ),
                max_time: PositiveF64(
                    0.0 < 4960348.837741784,
                ),
                length: 515,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3075733334304167,
                ),
                max_time: PositiveF64(
                    0.0 < 4524000.904037294,
                ),
                length: 590,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.34157803278339594,
                ),
                max_time: PositiveF64(
                    0.0 < 4689580.595126079,
                ),
                length: 381,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.35492942849256615,
                ),
                max_time: PositiveF64(
                    0.0 < 2642415.7715832503,
                ),
                length: 582,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.372554226228641,
                ),
                max_time: PositiveF64(
                    0.0 < 7376823.717035315,
                ),
                length: 1163,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3887220289910531,
                ),
                max_time: PositiveF64(
                    0.0 < 9029500.461403713,
                ),
                length: 698,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3953438173837971,
                ),
                max_time: PositiveF64(
                    0.0 < 3980117.9780506035,
                ),
                length: 733,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4049469585250376,
                ),
                max_time: PositiveF64(
                    0.0 < 7810305.774443954,
                ),
                length: 560,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4131683453216579,
                ),
                max_time: PositiveF64(
                    0.0 < 6815390.461584254,
                ),
                length: 717,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.41841918713409854,
                ),
                max_time: PositiveF64(
                    0.0 < 9218608.018182773,
                ),
                length: 568,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.42711368241044023,
                ),
                max_time: PositiveF64(
                    0.0 < 9249091.714937504,
                ),
                length: 550,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4979962916408409,
                ),
                max_time: PositiveF64(
                    0.0 < 10761530.248583063,
                ),
                length: 734,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5339692323255465,
                ),
                max_time: PositiveF64(
                    0.0 < 8704341.574047241,
                ),
                length: 929,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5639818706000319,
                ),
                max_time: PositiveF64(
                    0.0 < 8448647.191036912,
                ),
                length: 743,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5712077857212348,
                ),
                max_time: PositiveF64(
                    0.0 < 14438176.820239525,
                ),
                length: 740,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6092397507656859,
                ),
                max_time: PositiveF64(
                    0.0 < 10927456.194578327,
                ),
                length: 556,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6421841978584322,
                ),
                max_time: PositiveF64(
                    0.0 < 13668922.188975941,
                ),
                length: 680,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6901815845848251,
                ),
                max_time: PositiveF64(
                    0.0 < 8705978.146479595,
                ),
                length: 635,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6967779223338346,
                ),
                max_time: PositiveF64(
                    0.0 < 7472004.408022158,
                ),
                length: 538,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7065916189907138,
                ),
                max_time: PositiveF64(
                    0.0 < 8560415.439677577,
                ),
                length: 743,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7163283615743059,
                ),
                max_time: PositiveF64(
                    0.0 < 7437784.3914384805,
                ),
                length: 813,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7492618088724408,
                ),
                max_time: PositiveF64(
                    0.0 < 7150082.012993959,
                ),
                length: 672,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7545044472530809,
                ),
                max_time: PositiveF64(
                    0.0 < 7978766.445510924,
                ),
                length: 837,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8468073659490039,
                ),
                max_time: PositiveF64(
                    0.0 < 7548592.434139872,
                ),
                length: 871,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9299381567424565,
                ),
                max_time: PositiveF64(
                    0.0 < 5749573.925749987,
                ),
                length: 550,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.018902821333879,
                ),
                max_time: PositiveF64(
                    0.0 < 10185843.941979874,
                ),
                length: 732,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1807732637510653,
                ),
                max_time: PositiveF64(
                    0.0 < 7548934.84014939,
                ),
                length: 826,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.633869288931942,
                ),
                max_time: PositiveF64(
                    0.0 < 9010817.516447369,
                ),
                length: 705,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7278702868441402,
                ),
                max_time: PositiveF64(
                    0.0 < 5836489.564100118,
                ),
                length: 857,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8008777230021074,
                ),
                max_time: PositiveF64(
                    0.0 < 5403532.957811264,
                ),
                length: 571,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.0792574653766924,
                ),
                max_time: PositiveF64(
                    0.0 < 5555466.503393682,
                ),
                length: 799,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.094628661454533,
                ),
                max_time: PositiveF64(
                    0.0 < 6892250.970644755,
                ),
                length: 789,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.133595873368259,
                ),
                max_time: PositiveF64(
                    0.0 < 7923795.848837388,
                ),
                length: 1124,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.235005183364631,
                ),
                max_time: PositiveF64(
                    0.0 < 8347548.040656306,
                ),
                length: 751,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.6860781751966556,
                ),
                max_time: PositiveF64(
                    0.0 < 5535833.446886014,
                ),
                length: 497,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.9174607238313293,
                ),
                max_time: PositiveF64(
                    0.0 < 12378729.08570064,
                ),
                length: 666,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.503782679569719,
                ),
                max_time: PositiveF64(
                    0.0 < 6626152.441711674,
                ),
                length: 909,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 494ns
 - execution: 5.770498ms
 - cleanup: 11.172µs
INFO  The simulation resulted in a biodiversity of 31240 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        55 (peak)  47.05 (ave)

============================================
