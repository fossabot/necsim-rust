# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 3679626704411336501,

        algorithm: Classical(parallelism_mode:Averaging(delta_sync:1.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3584439[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 32 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-140-12-4.cx1.hpc.ic.ac.uk:32
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Thu 20 May 21:17:30 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 3679626704411336501,

        algorithm: Classical(parallelism_mode:Averaging(delta_sync:1.0)),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3584439[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-140-12-4.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 3679626704411336501,
        algorithm: Classical(
            MonolithicArguments {
                parallelism_mode: Averaging(
                    AveragingParallelismMode {
                        delta_sync: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3584439[1].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7fff7e80f0c8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7fff7e80f0e8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3584439[1].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 32 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 14.906273s
 - execution: 1822.046771492s
 - cleanup: 97.561827ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 16991150.331497047 after 31303482106 steps.

# mpiexec: finished at Thu 20 May 21:48:12 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0007010704136891798,
                ),
                max_time: PositiveF64(
                    0.0 < 10770263.809114546,
                ),
                length: 796,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.05705106858717273,
                ),
                max_time: PositiveF64(
                    0.0 < 8368105.376821044,
                ),
                length: 967,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.05934221545259237,
                ),
                max_time: PositiveF64(
                    0.0 < 10223878.750924207,
                ),
                length: 927,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.10950336406876339,
                ),
                max_time: PositiveF64(
                    0.0 < 11030707.275120009,
                ),
                length: 981,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.11120609940180992,
                ),
                max_time: PositiveF64(
                    0.0 < 12115609.31188318,
                ),
                length: 1084,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.12288358836764601,
                ),
                max_time: PositiveF64(
                    0.0 < 8776512.89683141,
                ),
                length: 795,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.130761169528177,
                ),
                max_time: PositiveF64(
                    0.0 < 10706247.098421827,
                ),
                length: 1068,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1762759326404173,
                ),
                max_time: PositiveF64(
                    0.0 < 3169467.7778994,
                ),
                length: 955,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.22060343062274113,
                ),
                max_time: PositiveF64(
                    0.0 < 7289960.178319664,
                ),
                length: 804,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.23952592158256064,
                ),
                max_time: PositiveF64(
                    0.0 < 8981620.184825372,
                ),
                length: 933,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2992917405308527,
                ),
                max_time: PositiveF64(
                    0.0 < 5828897.273180947,
                ),
                length: 741,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3450034233315374,
                ),
                max_time: PositiveF64(
                    0.0 < 10116278.424347002,
                ),
                length: 933,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3544704225631944,
                ),
                max_time: PositiveF64(
                    0.0 < 8255270.1387415,
                ),
                length: 1219,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3809871919312218,
                ),
                max_time: PositiveF64(
                    0.0 < 10563742.31152993,
                ),
                length: 1082,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.38107101700469453,
                ),
                max_time: PositiveF64(
                    0.0 < 8819872.906705689,
                ),
                length: 1221,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.41051833159390894,
                ),
                max_time: PositiveF64(
                    0.0 < 8968978.33538102,
                ),
                length: 1308,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.45973684081067917,
                ),
                max_time: PositiveF64(
                    0.0 < 11552011.57067158,
                ),
                length: 1033,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.49588216343741487,
                ),
                max_time: PositiveF64(
                    0.0 < 7461334.919844894,
                ),
                length: 812,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5095713952819141,
                ),
                max_time: PositiveF64(
                    0.0 < 7866366.611518649,
                ),
                length: 912,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6339633648014916,
                ),
                max_time: PositiveF64(
                    0.0 < 14970381.490486536,
                ),
                length: 901,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.661417675581192,
                ),
                max_time: PositiveF64(
                    0.0 < 9161386.0214128,
                ),
                length: 1137,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6679262179185648,
                ),
                max_time: PositiveF64(
                    0.0 < 4604513.153674982,
                ),
                length: 921,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7735689023992282,
                ),
                max_time: PositiveF64(
                    0.0 < 9318833.92658236,
                ),
                length: 791,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7784579719310367,
                ),
                max_time: PositiveF64(
                    0.0 < 3488207.856559799,
                ),
                length: 792,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.94527172186274,
                ),
                max_time: PositiveF64(
                    0.0 < 8896438.831876129,
                ),
                length: 869,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9465155721063476,
                ),
                max_time: PositiveF64(
                    0.0 < 11514705.346417572,
                ),
                length: 1085,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9686741703871132,
                ),
                max_time: PositiveF64(
                    0.0 < 5946987.064748645,
                ),
                length: 779,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.003599545649863,
                ),
                max_time: PositiveF64(
                    0.0 < 16991150.331497047,
                ),
                length: 1665,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1527220252709118,
                ),
                max_time: PositiveF64(
                    0.0 < 8891418.903111828,
                ),
                length: 589,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.232249736439926,
                ),
                max_time: PositiveF64(
                    0.0 < 6890120.109583666,
                ),
                length: 979,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2504777999147816,
                ),
                max_time: PositiveF64(
                    0.0 < 10905392.726544479,
                ),
                length: 997,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8085330510725683,
                ),
                max_time: PositiveF64(
                    0.0 < 9284927.491157304,
                ),
                length: 880,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 400ns
 - execution: 4.796967ms
 - cleanup: 10.557µs
INFO  The simulation resulted in a biodiversity of 30956 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :        62            32
 Used       :        40 (peak)  31.97 (ave)

============================================
