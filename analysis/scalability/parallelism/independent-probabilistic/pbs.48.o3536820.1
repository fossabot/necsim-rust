# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 265676036558533153,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3536820[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-100-10-4.cx1.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sat 15 May 20:49:42 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 265676036558533153,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3536820[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-100-10-4.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 265676036558533153,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Probabilistic(
                    ProbabilisticParallelismMode {
                        communication_probability: ClosedUnitF64(
                            0.0 <= 0.25 <= 1.0,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3536820[1].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffebb2fdb98; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffebb2fdbb8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3536820[1].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 15.899555939s
 - execution: 618.127461614s
 - cleanup: 62.315613ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 14863690.043492733 after 33256090137 steps.

# mpiexec: finished at Sat 15 May 21:00:22 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.008537507580190562,
                ),
                max_time: PositiveF64(
                    0.0 < 7507670.051423061,
                ),
                length: 507,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.013644505008156393,
                ),
                max_time: PositiveF64(
                    0.0 < 5998954.404226718,
                ),
                length: 559,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.021774991264882138,
                ),
                max_time: PositiveF64(
                    0.0 < 6160651.057495695,
                ),
                length: 733,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.028822338674385106,
                ),
                max_time: PositiveF64(
                    0.0 < 3968505.403745461,
                ),
                length: 374,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.10483170670239961,
                ),
                max_time: PositiveF64(
                    0.0 < 4796721.552410846,
                ),
                length: 554,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.11207046329133163,
                ),
                max_time: PositiveF64(
                    0.0 < 4257215.273254782,
                ),
                length: 634,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1293174351573141,
                ),
                max_time: PositiveF64(
                    0.0 < 4351497.62337794,
                ),
                length: 667,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.13706928710511113,
                ),
                max_time: PositiveF64(
                    0.0 < 6775878.509856702,
                ),
                length: 813,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.15300727306288153,
                ),
                max_time: PositiveF64(
                    0.0 < 7962147.046486134,
                ),
                length: 680,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18137101361475905,
                ),
                max_time: PositiveF64(
                    0.0 < 14863690.043492733,
                ),
                length: 723,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.21163282981029874,
                ),
                max_time: PositiveF64(
                    0.0 < 7910430.142179028,
                ),
                length: 714,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.21316312192510045,
                ),
                max_time: PositiveF64(
                    0.0 < 9810688.971239507,
                ),
                length: 988,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.21982516615806302,
                ),
                max_time: PositiveF64(
                    0.0 < 8558471.29898865,
                ),
                length: 1201,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2962811271357524,
                ),
                max_time: PositiveF64(
                    0.0 < 10759640.75526007,
                ),
                length: 677,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2963728642656416,
                ),
                max_time: PositiveF64(
                    0.0 < 7093090.380543738,
                ),
                length: 1122,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3240476686738578,
                ),
                max_time: PositiveF64(
                    0.0 < 4998312.613417708,
                ),
                length: 575,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.32769868864398455,
                ),
                max_time: PositiveF64(
                    0.0 < 3766956.5258682566,
                ),
                length: 572,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.35093127824373793,
                ),
                max_time: PositiveF64(
                    0.0 < 3669302.488851989,
                ),
                length: 612,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3785539375843112,
                ),
                max_time: PositiveF64(
                    0.0 < 9294948.853408007,
                ),
                length: 592,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.38246732963461083,
                ),
                max_time: PositiveF64(
                    0.0 < 6684571.9172812365,
                ),
                length: 751,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5171831037830341,
                ),
                max_time: PositiveF64(
                    0.0 < 5139089.594562337,
                ),
                length: 517,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5231208657397739,
                ),
                max_time: PositiveF64(
                    0.0 < 8651314.028072616,
                ),
                length: 490,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5526843534629304,
                ),
                max_time: PositiveF64(
                    0.0 < 5295702.074527503,
                ),
                length: 681,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5895262175864115,
                ),
                max_time: PositiveF64(
                    0.0 < 8929620.958451977,
                ),
                length: 843,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6232345105911801,
                ),
                max_time: PositiveF64(
                    0.0 < 8600843.908220531,
                ),
                length: 543,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6240613024643542,
                ),
                max_time: PositiveF64(
                    0.0 < 8502414.478953386,
                ),
                length: 967,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6742329309051289,
                ),
                max_time: PositiveF64(
                    0.0 < 10383678.718606295,
                ),
                length: 766,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7016915711940332,
                ),
                max_time: PositiveF64(
                    0.0 < 11561901.443790335,
                ),
                length: 743,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7266662939765678,
                ),
                max_time: PositiveF64(
                    0.0 < 4569275.0895094555,
                ),
                length: 829,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9258146541254297,
                ),
                max_time: PositiveF64(
                    0.0 < 12226885.712480733,
                ),
                length: 798,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9486790079010645,
                ),
                max_time: PositiveF64(
                    0.0 < 4441041.1891248925,
                ),
                length: 562,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9506682262572572,
                ),
                max_time: PositiveF64(
                    0.0 < 9015117.372767763,
                ),
                length: 743,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9941997709361421,
                ),
                max_time: PositiveF64(
                    0.0 < 10141863.000472223,
                ),
                length: 752,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0675888606932813,
                ),
                max_time: PositiveF64(
                    0.0 < 8960954.072552126,
                ),
                length: 649,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.155829324176312,
                ),
                max_time: PositiveF64(
                    0.0 < 6367507.964243908,
                ),
                length: 831,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3696508502602283,
                ),
                max_time: PositiveF64(
                    0.0 < 8137977.973484233,
                ),
                length: 859,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.5756054595932267,
                ),
                max_time: PositiveF64(
                    0.0 < 3004180.4908132977,
                ),
                length: 529,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7897044320623237,
                ),
                max_time: PositiveF64(
                    0.0 < 8717433.813993635,
                ),
                length: 758,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9132007123771881,
                ),
                max_time: PositiveF64(
                    0.0 < 7833913.171999021,
                ),
                length: 800,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9634276683048615,
                ),
                max_time: PositiveF64(
                    0.0 < 5051027.426018676,
                ),
                length: 702,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.0258395330739027,
                ),
                max_time: PositiveF64(
                    0.0 < 3069175.9855800117,
                ),
                length: 599,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.146904026203905,
                ),
                max_time: PositiveF64(
                    0.0 < 6851848.156134641,
                ),
                length: 797,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.1953175495281227,
                ),
                max_time: PositiveF64(
                    0.0 < 7237421.200029326,
                ),
                length: 465,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.779656961943881,
                ),
                max_time: PositiveF64(
                    0.0 < 8417333.314010777,
                ),
                length: 721,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.9258532587049975,
                ),
                max_time: PositiveF64(
                    0.0 < 7683880.80575637,
                ),
                length: 548,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.995603538440977,
                ),
                max_time: PositiveF64(
                    0.0 < 4735128.643721668,
                ),
                length: 411,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.259494532542381,
                ),
                max_time: PositiveF64(
                    0.0 < 7517761.238185363,
                ),
                length: 564,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 7.035401329694833,
                ),
                max_time: PositiveF64(
                    0.0 < 11057137.851079449,
                ),
                length: 859,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 517ns
 - execution: 5.501554ms
 - cleanup: 11.703µs
INFO  The simulation resulted in a biodiversity of 31087 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        54 (peak)  47.47 (ave)

============================================
