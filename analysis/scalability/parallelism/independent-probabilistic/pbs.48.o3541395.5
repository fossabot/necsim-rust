# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 5589308346919779697,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[5].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-15.cx3.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 18:24:11 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 5589308346919779697,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[5].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-15.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 5589308346919779697,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Probabilistic(
                    ProbabilisticParallelismMode {
                        communication_probability: ClosedUnitF64(
                            0.0 <= 0.25 <= 1.0,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541395[5].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffe42103318; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffe42103338; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541395[5].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 13.362282578s
 - execution: 450.181023431s
 - cleanup: 98.617119ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 12673708.154605845 after 33714898657 steps.

# mpiexec: finished at Sun 16 May 18:32:07 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.013322717809813645,
                ),
                max_time: PositiveF64(
                    0.0 < 9670523.005841758,
                ),
                length: 736,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0457055017906669,
                ),
                max_time: PositiveF64(
                    0.0 < 9429388.694368789,
                ),
                length: 718,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.052780986043820866,
                ),
                max_time: PositiveF64(
                    0.0 < 6133959.206736448,
                ),
                length: 516,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.05656428782718281,
                ),
                max_time: PositiveF64(
                    0.0 < 5430833.644135827,
                ),
                length: 844,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.10533206763622682,
                ),
                max_time: PositiveF64(
                    0.0 < 9316585.064718101,
                ),
                length: 742,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.13912368695797617,
                ),
                max_time: PositiveF64(
                    0.0 < 11138655.090888072,
                ),
                length: 1155,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.15085984420495135,
                ),
                max_time: PositiveF64(
                    0.0 < 8595576.472367598,
                ),
                length: 579,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.15215647899911078,
                ),
                max_time: PositiveF64(
                    0.0 < 5451019.838322387,
                ),
                length: 579,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.15428000745790915,
                ),
                max_time: PositiveF64(
                    0.0 < 8089428.609151078,
                ),
                length: 786,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1717200297135726,
                ),
                max_time: PositiveF64(
                    0.0 < 10991010.963514088,
                ),
                length: 735,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.1820371053136982,
                ),
                max_time: PositiveF64(
                    0.0 < 5729024.48786743,
                ),
                length: 508,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.20261249727124864,
                ),
                max_time: PositiveF64(
                    0.0 < 10453702.089791652,
                ),
                length: 519,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.20752680104058374,
                ),
                max_time: PositiveF64(
                    0.0 < 9717328.907386849,
                ),
                length: 929,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2515334138664862,
                ),
                max_time: PositiveF64(
                    0.0 < 5142787.608917552,
                ),
                length: 621,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2685995259130052,
                ),
                max_time: PositiveF64(
                    0.0 < 12659092.269934202,
                ),
                length: 688,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2783056901121985,
                ),
                max_time: PositiveF64(
                    0.0 < 3377180.1668190053,
                ),
                length: 731,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.30466881923519784,
                ),
                max_time: PositiveF64(
                    0.0 < 12019122.108091615,
                ),
                length: 830,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3241700288693279,
                ),
                max_time: PositiveF64(
                    0.0 < 12121224.222159369,
                ),
                length: 756,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.33223724018364,
                ),
                max_time: PositiveF64(
                    0.0 < 11258139.812214216,
                ),
                length: 827,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3663129146043411,
                ),
                max_time: PositiveF64(
                    0.0 < 3712606.4548193784,
                ),
                length: 590,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3898015413586262,
                ),
                max_time: PositiveF64(
                    0.0 < 8566106.716338687,
                ),
                length: 787,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.40663348998867965,
                ),
                max_time: PositiveF64(
                    0.0 < 10950421.928722247,
                ),
                length: 1218,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4089433062854171,
                ),
                max_time: PositiveF64(
                    0.0 < 9309692.96745797,
                ),
                length: 873,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.44247773914169763,
                ),
                max_time: PositiveF64(
                    0.0 < 3365780.178869958,
                ),
                length: 489,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5637659931899077,
                ),
                max_time: PositiveF64(
                    0.0 < 5598448.279163194,
                ),
                length: 571,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6208862595335962,
                ),
                max_time: PositiveF64(
                    0.0 < 12673708.154605845,
                ),
                length: 694,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7685927312833376,
                ),
                max_time: PositiveF64(
                    0.0 < 3121228.276561867,
                ),
                length: 614,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8918030442501634,
                ),
                max_time: PositiveF64(
                    0.0 < 10223159.170040475,
                ),
                length: 756,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9792210645995276,
                ),
                max_time: PositiveF64(
                    0.0 < 4591994.981795262,
                ),
                length: 398,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.027515980215146,
                ),
                max_time: PositiveF64(
                    0.0 < 7834201.886234704,
                ),
                length: 773,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0505988514377749,
                ),
                max_time: PositiveF64(
                    0.0 < 7750914.6023125,
                ),
                length: 673,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.195878521489877,
                ),
                max_time: PositiveF64(
                    0.0 < 7479754.306749872,
                ),
                length: 372,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.261147837766245,
                ),
                max_time: PositiveF64(
                    0.0 < 6822441.525769702,
                ),
                length: 588,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3127495165596224,
                ),
                max_time: PositiveF64(
                    0.0 < 5886867.814216895,
                ),
                length: 1012,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.6076098994037102,
                ),
                max_time: PositiveF64(
                    0.0 < 5917706.996930439,
                ),
                length: 561,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7843854694211687,
                ),
                max_time: PositiveF64(
                    0.0 < 6136089.753512406,
                ),
                length: 547,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.856298622565456,
                ),
                max_time: PositiveF64(
                    0.0 < 5586727.748296524,
                ),
                length: 815,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8699296447937475,
                ),
                max_time: PositiveF64(
                    0.0 < 2263666.5182664595,
                ),
                length: 595,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.878231677627452,
                ),
                max_time: PositiveF64(
                    0.0 < 10183002.52148005,
                ),
                length: 750,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.8825096910398575,
                ),
                max_time: PositiveF64(
                    0.0 < 6131013.8052588,
                ),
                length: 666,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.1834475845674506,
                ),
                max_time: PositiveF64(
                    0.0 < 9197094.23692694,
                ),
                length: 589,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.2159718689333205,
                ),
                max_time: PositiveF64(
                    0.0 < 11776692.800732343,
                ),
                length: 618,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.514214463594795,
                ),
                max_time: PositiveF64(
                    0.0 < 9058753.108587578,
                ),
                length: 580,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.87857708823101,
                ),
                max_time: PositiveF64(
                    0.0 < 6720389.56806555,
                ),
                length: 726,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.3615108215177507,
                ),
                max_time: PositiveF64(
                    0.0 < 8423039.357293064,
                ),
                length: 799,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.5477697119744596,
                ),
                max_time: PositiveF64(
                    0.0 < 9769511.530591704,
                ),
                length: 723,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.478675786281137,
                ),
                max_time: PositiveF64(
                    0.0 < 9631658.211799629,
                ),
                length: 798,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 6.653926169594894,
                ),
                max_time: PositiveF64(
                    0.0 < 7016668.291081209,
                ),
                length: 669,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 500ns
 - execution: 4.868639ms
 - cleanup: 13.511µs
INFO  The simulation resulted in a biodiversity of 31067 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        62 (peak)  44.83 (ave)

============================================
