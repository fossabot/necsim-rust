# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 12526466523572159488,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx3-7-11.cx3.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 18:10:18 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 12526466523572159488,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[1].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx3-7-11.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 12526466523572159488,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Probabilistic(
                    ProbabilisticParallelismMode {
                        communication_probability: ClosedUnitF64(
                            0.0 <= 0.25 <= 1.0,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541395[1].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7fff9633f9d8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7fff9633f9f8; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541395[1].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 12.843926724s
 - execution: 440.110163703s
 - cleanup: 392.489225ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 19691651.335831262 after 33438338379 steps.

# mpiexec: finished at Sun 16 May 18:18:09 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.018854790477099037,
                ),
                max_time: PositiveF64(
                    0.0 < 10651771.379747605,
                ),
                length: 793,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.021652439518075273,
                ),
                max_time: PositiveF64(
                    0.0 < 6917682.564259604,
                ),
                length: 757,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.024567830879977492,
                ),
                max_time: PositiveF64(
                    0.0 < 5866469.702368224,
                ),
                length: 535,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.041361861333170546,
                ),
                max_time: PositiveF64(
                    0.0 < 6308059.655941509,
                ),
                length: 673,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0702681537635419,
                ),
                max_time: PositiveF64(
                    0.0 < 12713734.991008174,
                ),
                length: 784,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18457334482188936,
                ),
                max_time: PositiveF64(
                    0.0 < 14947724.794211958,
                ),
                length: 813,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.18518894860502289,
                ),
                max_time: PositiveF64(
                    0.0 < 2577461.247337896,
                ),
                length: 405,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.19443060784738742,
                ),
                max_time: PositiveF64(
                    0.0 < 3517550.4667549827,
                ),
                length: 613,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.21857736056652177,
                ),
                max_time: PositiveF64(
                    0.0 < 7021092.332852333,
                ),
                length: 708,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2411349741394353,
                ),
                max_time: PositiveF64(
                    0.0 < 7564664.583478397,
                ),
                length: 558,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.259554919863898,
                ),
                max_time: PositiveF64(
                    0.0 < 6907936.5075555,
                ),
                length: 702,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.27792400642949766,
                ),
                max_time: PositiveF64(
                    0.0 < 8358959.601427011,
                ),
                length: 488,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2804537883785503,
                ),
                max_time: PositiveF64(
                    0.0 < 5062657.280942155,
                ),
                length: 528,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.31507259151167055,
                ),
                max_time: PositiveF64(
                    0.0 < 9212448.401686287,
                ),
                length: 1210,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.3930702145684877,
                ),
                max_time: PositiveF64(
                    0.0 < 7272131.026142094,
                ),
                length: 519,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.40508761995239984,
                ),
                max_time: PositiveF64(
                    0.0 < 3068213.1641927836,
                ),
                length: 655,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4198810926089309,
                ),
                max_time: PositiveF64(
                    0.0 < 14634295.6939435,
                ),
                length: 774,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4783447050466483,
                ),
                max_time: PositiveF64(
                    0.0 < 8092140.223294755,
                ),
                length: 543,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5219327154773423,
                ),
                max_time: PositiveF64(
                    0.0 < 9029549.39640404,
                ),
                length: 577,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6186057258445892,
                ),
                max_time: PositiveF64(
                    0.0 < 1425156.4078479665,
                ),
                length: 579,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6212204134882418,
                ),
                max_time: PositiveF64(
                    0.0 < 8812817.002750544,
                ),
                length: 471,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6519578870744429,
                ),
                max_time: PositiveF64(
                    0.0 < 9219629.571065476,
                ),
                length: 913,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6568892830221882,
                ),
                max_time: PositiveF64(
                    0.0 < 7961254.145662821,
                ),
                length: 723,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6673433601017114,
                ),
                max_time: PositiveF64(
                    0.0 < 7783563.638826132,
                ),
                length: 491,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6703106826567669,
                ),
                max_time: PositiveF64(
                    0.0 < 7210335.635187153,
                ),
                length: 556,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6726440937847495,
                ),
                max_time: PositiveF64(
                    0.0 < 6024798.8403154155,
                ),
                length: 718,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7863251268063964,
                ),
                max_time: PositiveF64(
                    0.0 < 6865993.792955935,
                ),
                length: 835,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7867531488689661,
                ),
                max_time: PositiveF64(
                    0.0 < 2982018.0643736804,
                ),
                length: 655,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8417024218013347,
                ),
                max_time: PositiveF64(
                    0.0 < 7682993.700986858,
                ),
                length: 639,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8652426083118712,
                ),
                max_time: PositiveF64(
                    0.0 < 8410705.059132922,
                ),
                length: 665,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8759010186821381,
                ),
                max_time: PositiveF64(
                    0.0 < 5452556.493199166,
                ),
                length: 767,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8990262697255778,
                ),
                max_time: PositiveF64(
                    0.0 < 6369343.250989127,
                ),
                length: 438,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9693356374378981,
                ),
                max_time: PositiveF64(
                    0.0 < 9023360.542395884,
                ),
                length: 1139,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.970678345668549,
                ),
                max_time: PositiveF64(
                    0.0 < 17861562.61796032,
                ),
                length: 588,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0174738082460906,
                ),
                max_time: PositiveF64(
                    0.0 < 7192402.021696951,
                ),
                length: 837,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0721086935671702,
                ),
                max_time: PositiveF64(
                    0.0 < 5083053.5511891395,
                ),
                length: 630,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0893873018468034,
                ),
                max_time: PositiveF64(
                    0.0 < 6720047.682450885,
                ),
                length: 734,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.119960890966412,
                ),
                max_time: PositiveF64(
                    0.0 < 8848666.469088966,
                ),
                length: 937,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.2107265595308716,
                ),
                max_time: PositiveF64(
                    0.0 < 8690573.554008966,
                ),
                length: 709,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.215926512965078,
                ),
                max_time: PositiveF64(
                    0.0 < 10018805.18761596,
                ),
                length: 808,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4233559701180263,
                ),
                max_time: PositiveF64(
                    0.0 < 11692695.195892643,
                ),
                length: 747,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9976457812207646,
                ),
                max_time: PositiveF64(
                    0.0 < 19463077.729983684,
                ),
                length: 793,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.02184725921287,
                ),
                max_time: PositiveF64(
                    0.0 < 8946605.826916426,
                ),
                length: 716,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.644713911900678,
                ),
                max_time: PositiveF64(
                    0.0 < 19691651.335831262,
                ),
                length: 840,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.8414020844223113,
                ),
                max_time: PositiveF64(
                    0.0 < 10314837.831258101,
                ),
                length: 743,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.0858297533762196,
                ),
                max_time: PositiveF64(
                    0.0 < 4005604.4514920474,
                ),
                length: 519,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.586590633804288,
                ),
                max_time: PositiveF64(
                    0.0 < 12149426.99914146,
                ),
                length: 634,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 5.221136301344814,
                ),
                max_time: PositiveF64(
                    0.0 < 4267380.013855538,
                ),
                length: 532,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 650ns
 - execution: 8.521232ms
 - cleanup: 13.1µs
INFO  The simulation resulted in a biodiversity of 30483 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        67 (peak)  47.43 (ave)

============================================
