# mpiexec: MPI is /apps/mpi/intel/2019.6.166
# mpiexec: No RDMA network found -- using sockets+shared memory
# mpiexec: bootstrapping with /apps/mpi/intel/2019.6.166/bin/__pbs_tmrsh
# mpiexec: full path to program is /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence
# mpiexec: program arguments are: simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 17987480349422607471,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[7].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
# mpiexec: 48 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: machinefile configured as:
cx1-101-14-4.cx1.hpc.ic.ac.uk:48
#
# mpiexec: Checking all nodes are ONLINE:
# mpiexec: All nodes appear ONLINE
# mpiexec: launch started at Sun 16 May 18:24:11 BST 2021
# mpiexec: launching program...
# /rds/general/user/ml5717/home/necsim-rust/target-mpi/release/rustcoalescence simulate (
        speciation: 1e-06,
        sample: 0.025,
        seed: 17987480349422607471,

        algorithm: Independent(
            delta_t: 2.0,
            step_slice: 10,
            dedup_cache: Relative(factor: 1.0),
            parallelism_mode: Probabilistic(communication:0.25),
        ),

        scenario: SpatiallyExplicit(
            habitat: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif",
            dispersal: "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif",
        ),
        
        log: "/var/tmp/pbs.3541395[7].pbs/event_log",

        reporters: [
            Plugin(
                library: "/rds/general/user/ml5717/home/necsim-rust/target-mpi/release/deps/libnecsim_plugins_common.so",
                reporters: [Execution(),Biodiversity()],
            ),
        ],
    )
(cx1-101-14-4.cx1.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)

INFO  Starting to load the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" ...
INFO  Used GDAL no data value -99.0 ...
INFO  Successfully loaded the dispersal map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/dispersal.tif" with dimensions 11700x11700 [cols x rows].
INFO  Starting to load the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" ...
INFO  Used GDAL no data value 0 ...
INFO  Successfully loaded the habitat map "/rds/general/user/ml5717/home/necsim-rust/maps/madingley/fg0size12/habitat.tif" with dimensions 180x65 [cols x rows].
INFO  Parsed simulation arguments:
SimulateArgs {
    common: CommonArgs {
        speciation_probability_per_generation: PositiveUnitF64(
            0.0 < 0.000001 <= 1.0,
        ),
        sample_percentage: ClosedUnitF64(
            0.0 <= 0.025 <= 1.0,
        ),
        seed: 17987480349422607471,
        algorithm: Independent(
            IndependentArguments {
                delta_t: PositiveF64(
                    0.0 < 2,
                ),
                step_slice: 10,
                dedup_cache: Relative(
                    RelativeDedupCache {
                        factor: PositiveF64(
                            0.0 < 1,
                        ),
                    },
                ),
                parallelism_mode: Probabilistic(
                    ProbabilisticParallelismMode {
                        communication_probability: ClosedUnitF64(
                            0.0 <= 0.25 <= 1.0,
                        ),
                    },
                ),
            },
        ),
    },
    event_log: Some(
        EventLogRecorder {
            segment_size: 1000000,
            directory: "/var/tmp/pbs.3541395[7].pbs/event_log/0",
            segment_index: 0,
            buffer: Vec<Event; 0>,
        },
    ),
    scenario: SpatiallyExplicit(
        InMemoryArguments {
            habitat_map: Array2D {
                array: Box [ 0x7ffd5eb2d4e8; 11700 ],
                num_rows: 65,
                num_columns: 180,
            },
            dispersal_map: Array2D {
                array: Box [ 0x7ffd5eb2d508; 136890000 ],
                num_rows: 11700,
                num_columns: 11700,
            },
        },
    ),
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  The simulation will log its events to "/var/tmp/pbs.3541395[7].pbs/event_log/0".
WARN  Therefore, only progress will be reported live.
INFO  The simulation will be distributed across 48 partitions.


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 14.792449408s
 - execution: 619.462315995s
 - cleanup: 61.396612ms

=============================== Reporter Summary ===============================

INFO  The simulation finished at time 15115308.605631648 after 33273993545 steps.

# mpiexec: finished at Sun 16 May 18:34:51 BST 2021
INFO  Parsed replay arguments:
ReplayArgs {
    log: EventLogReplay {
        frontier: [
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.0005860241474937578,
                ),
                max_time: PositiveF64(
                    0.0 < 5771893.118103596,
                ),
                length: 524,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.003644894339707161,
                ),
                max_time: PositiveF64(
                    0.0 < 7458616.506234348,
                ),
                length: 629,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.014134158943158726,
                ),
                max_time: PositiveF64(
                    0.0 < 6186063.300455818,
                ),
                length: 713,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.026283960614464252,
                ),
                max_time: PositiveF64(
                    0.0 < 7139470.316274913,
                ),
                length: 430,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.04787099193915134,
                ),
                max_time: PositiveF64(
                    0.0 < 10495118.232540332,
                ),
                length: 766,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.13590595039117437,
                ),
                max_time: PositiveF64(
                    0.0 < 14652331.169999069,
                ),
                length: 547,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.22920509657541777,
                ),
                max_time: PositiveF64(
                    0.0 < 9858728.288143873,
                ),
                length: 803,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2628148864877258,
                ),
                max_time: PositiveF64(
                    0.0 < 8258000.268126209,
                ),
                length: 660,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.2823522628870003,
                ),
                max_time: PositiveF64(
                    0.0 < 9668971.107487302,
                ),
                length: 887,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.29868295771752607,
                ),
                max_time: PositiveF64(
                    0.0 < 7261714.531933421,
                ),
                length: 684,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.43670781884865884,
                ),
                max_time: PositiveF64(
                    0.0 < 5731674.7346835965,
                ),
                length: 578,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.44165444631705575,
                ),
                max_time: PositiveF64(
                    0.0 < 5894338.124796078,
                ),
                length: 611,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.454477930290772,
                ),
                max_time: PositiveF64(
                    0.0 < 4718754.128260161,
                ),
                length: 600,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.46094457795815247,
                ),
                max_time: PositiveF64(
                    0.0 < 8575919.107241405,
                ),
                length: 810,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4690278322531405,
                ),
                max_time: PositiveF64(
                    0.0 < 3352369.471893236,
                ),
                length: 712,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.47457920462558856,
                ),
                max_time: PositiveF64(
                    0.0 < 5075354.423007187,
                ),
                length: 610,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.4858862239213433,
                ),
                max_time: PositiveF64(
                    0.0 < 6394738.249920138,
                ),
                length: 484,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5312449576975846,
                ),
                max_time: PositiveF64(
                    0.0 < 7313664.099783747,
                ),
                length: 811,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5495636907026378,
                ),
                max_time: PositiveF64(
                    0.0 < 11328632.445103249,
                ),
                length: 669,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5548363902540798,
                ),
                max_time: PositiveF64(
                    0.0 < 8350159.857114894,
                ),
                length: 949,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.5782479749047427,
                ),
                max_time: PositiveF64(
                    0.0 < 13538580.180886654,
                ),
                length: 578,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6484318242059137,
                ),
                max_time: PositiveF64(
                    0.0 < 11046769.61433798,
                ),
                length: 383,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.6533988119608387,
                ),
                max_time: PositiveF64(
                    0.0 < 8168063.220804832,
                ),
                length: 567,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.7724979633511535,
                ),
                max_time: PositiveF64(
                    0.0 < 15115308.605631648,
                ),
                length: 847,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8030192064310877,
                ),
                max_time: PositiveF64(
                    0.0 < 7789817.921028871,
                ),
                length: 667,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8382670105577996,
                ),
                max_time: PositiveF64(
                    0.0 < 8939051.24792033,
                ),
                length: 597,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.867618936782627,
                ),
                max_time: PositiveF64(
                    0.0 < 3104731.695718803,
                ),
                length: 592,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.8700225298894455,
                ),
                max_time: PositiveF64(
                    0.0 < 6391615.018494355,
                ),
                length: 568,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9422156875648378,
                ),
                max_time: PositiveF64(
                    0.0 < 8064224.818222952,
                ),
                length: 558,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 0.9547040100910802,
                ),
                max_time: PositiveF64(
                    0.0 < 11634205.335938543,
                ),
                length: 737,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0128396098212247,
                ),
                max_time: PositiveF64(
                    0.0 < 9744240.31106399,
                ),
                length: 813,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0682146471567178,
                ),
                max_time: PositiveF64(
                    0.0 < 6165434.187505432,
                ),
                length: 752,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0728467009158242,
                ),
                max_time: PositiveF64(
                    0.0 < 7453581.810321857,
                ),
                length: 663,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.0879466999472907,
                ),
                max_time: PositiveF64(
                    0.0 < 8151522.70630712,
                ),
                length: 732,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.1121517407227184,
                ),
                max_time: PositiveF64(
                    0.0 < 10689790.162402967,
                ),
                length: 710,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3062400053886958,
                ),
                max_time: PositiveF64(
                    0.0 < 9416252.916736571,
                ),
                length: 1112,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.365099756577459,
                ),
                max_time: PositiveF64(
                    0.0 < 7921071.128983209,
                ),
                length: 813,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.3783474754435006,
                ),
                max_time: PositiveF64(
                    0.0 < 5734394.872357186,
                ),
                length: 774,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.4839130549689579,
                ),
                max_time: PositiveF64(
                    0.0 < 7427095.932341157,
                ),
                length: 1248,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.497884143109608,
                ),
                max_time: PositiveF64(
                    0.0 < 3953168.7491030027,
                ),
                length: 622,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.5816341847117283,
                ),
                max_time: PositiveF64(
                    0.0 < 12199688.5680696,
                ),
                length: 788,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7027866585661429,
                ),
                max_time: PositiveF64(
                    0.0 < 4614007.99235592,
                ),
                length: 526,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.7848465625474579,
                ),
                max_time: PositiveF64(
                    0.0 < 9356032.48488308,
                ),
                length: 842,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 1.9304303421927451,
                ),
                max_time: PositiveF64(
                    0.0 < 5473866.20387488,
                ),
                length: 627,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.4113098597947986,
                ),
                max_time: PositiveF64(
                    0.0 < 10911022.482206546,
                ),
                length: 840,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 2.4232856236933173,
                ),
                max_time: PositiveF64(
                    0.0 < 10601546.818223689,
                ),
                length: 727,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 3.99990285042207,
                ),
                max_time: PositiveF64(
                    0.0 < 8771616.600802682,
                ),
                length: 531,
            },
            SortedSortedSegments {
                segments: Vec<SortedSegment; 1>,
                min_time: PositiveF64(
                    0.0 < 4.600416013588156,
                ),
                max_time: PositiveF64(
                    0.0 < 9136886.385068614,
                ),
                length: 706,
            },
        ],
        with_speciation: true,
        with_dispersal: false,
    },
    reporters: ReportSpeciationIgnoreDispersalReportProgress(
        ReporterPluginVec {
            plugins: [
                ExecutionTimeReporter {
                    start_time: None,
                    end_time: None,
                },
                BiodiversityReporter {
                    biodiversity: 0,
                },
            ],
        },
    ),
}
INFO  Starting event replay ...


=============================== Reporter Summary ===============================

INFO  The simulation took:
 - initialisation: 591ns
 - execution: 5.861835ms
 - cleanup: 12.151µs
INFO  The simulation resulted in a biodiversity of 31109 unique species.

=============================== Reporter Summary ===============================

INFO  The event replay has completed.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :       124            48
 Used       :        54 (peak)  47.42 (ave)

============================================
