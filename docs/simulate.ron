(
    /* per-individual per-generation probability that an individual speciates
     *  i.e. is the creator of a new unique species */
    speciation: (0.0 < f64 <= 1.0),
    /* percentage of how many individuals are simulated */
    sample: (0.0 <= f64 <= 1.0),
    /* initial seed for the random number generator */
    seed: (u64),

    /* selection of the coalescence algorithm which is used */
    algorithm: (
        /* monolithic; picks a random individual for the next event; CPU-based */
      | Classical(
            /* selection of how the algorithm should be parallelised across partitions */
            /* optional, dynamic default = Monolithic / OptimisticLockstep */
            parallelism_mode: (
                /* no parallelisation, the algorithm runs on a single partition only
                 * invalid when the simulation is internally parallelised */
              | Monolithic
                /* (1) simulate each partition independently for some delta_sync
                 * (2) check if any (unknown) migrations between partitions occured
                 *     (a) if yes, roll back and try again with >= 1 more known migration
                 *     (b) if no, exit the repetition
                 * (3) designate the past delta_sync as the last safe point
                 * (4) repeat with the next delta_sync until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Optimistic(
                    /* simulation time between safe points */
                    delta_sync: (0.0 < f64),
                )
                /* (1) vote on which partition has the earliest next event
                 * (2) advance this partition by one step
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Lockstep
                /* (1) simulate each partition independently until their next emigration
                 * (2) vote on which partition has the earliest emigration event
                 * (3) roll back and simulate exactly until and including this first migration
                 * (4) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | OptimisticLockstep
                /* WARNING: may produce inaccurate results
                 *
                 * (1) simulate each partition independently for some delta_sync
                 * (2) perform all migrations simultaneously at this synchronisation point
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Averaging(
                    delta_sync: (0.0 < f64),
                )
            )
        )
        /* monolithic; has a queue of the next events for all locations; CPU-based */
      | Gillespie(
            /* selection of how the algorithm should be parallelised across partitions */
            /* optional, dynamic default = Monolithic / OptimisticLockstep */
            parallelism_mode: (
                /* no parallelisation, the algorithm runs on a single partition only
                 * invalid when the simulation is internally parallelised */
              | Monolithic
                /* (1) simulate each partition independently for some delta_sync
                 * (2) check if any (unknown) migrations between partitions occured
                 *     (a) if yes, roll back and try again with >= 1 more known migration
                 *     (b) if no, exit the repetition
                 * (3) designate the past delta_sync as the last safe point
                 * (4) repeat with the next delta_sync until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Optimistic(
                    /* simulation time between safe points */
                    delta_sync: (0.0 < f64),
                )
                /* (1) vote on which partition has the earliest next event
                 * (2) advance this partition by one step
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Lockstep
                /* (1) simulate each partition independently until their next emigration
                 * (2) vote on which partition has the earliest emigration event
                 * (3) roll back and simulate exactly until and including this first migration
                 * (4) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | OptimisticLockstep
                /* WARNING: may produce inaccurate results
                 *
                 * (1) simulate each partition independently for some delta_sync
                 * (2) perform all migrations simultaneously at this synchronisation point
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Averaging(
                    delta_sync: (0.0 < f64),
                )
            )
        )
        /* monolithic; like Gillespie but skips no-coalescence self-dispersal events; CPU-based */
      | SkippingGillespie(
            /* selection of how the algorithm should be parallelised across partitions */
            /* optional, dynamic default = Monolithic / OptimisticLockstep */
            parallelism_mode: (
                /* no parallelisation, the algorithm runs on a single partition only
                 * invalid when the simulation is internally parallelised */
              | Monolithic
                /* (1) simulate each partition independently for some delta_sync
                 * (2) check if any (unknown) migrations between partitions occured
                 *     (a) if yes, roll back and try again with >= 1 more known migration
                 *     (b) if no, exit the repetition
                 * (3) designate the past delta_sync as the last safe point
                 * (4) repeat with the next delta_sync until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Optimistic(
                    /* simulation time between safe points */
                    delta_sync: (0.0 < f64),
                )
                /* (1) vote on which partition has the earliest next event
                 * (2) advance this partition by one step
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Lockstep
                /* (1) simulate each partition independently until their next emigration
                 * (2) vote on which partition has the earliest emigration event
                 * (3) roll back and simulate exactly until and including this first migration
                 * (4) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | OptimisticLockstep
                /* WARNING: may produce inaccurate results
                 *
                 * (1) simulate each partition independently for some delta_sync
                 * (2) perform all migrations simultaneously at this synchronisation point
                 * (3) repeat until finished
                 *
                 * invalid when the simulation is NOT internally parallelised */
              | Averaging(
                    delta_sync: (0.0 < f64),
                )
            )
        )
        /* independent; simulates each individual without knowledge of others; CUDA GPU-based */
      | CUDA(
            /* index of the CUDA GPU device on which the simulation will be run
             * optional, default = 0 */
            device: (u32),
            /* if true, enables just-in-time compilation of the simulation parameters into
             *  the CUDA kernel
             * optional, default = false */
            ptx_jit: (bool),
            /* simulation time between random number generator repriming
             *  -> lower deltas require fewer draws to pick the time of the next event
             *  -> higher deltas require fewer reprimings to pick the time of the next event
             * WARNING: changes the result of a particular simulation run
             * optional, default = 1.0 */
            delta_t: (0.0 < f64),
            /* CUDA thread block 1D size, should be a power of 2
             * optional, default = 32 */
            block_size: (u32),
            /* CUDA thread grid 1D size, should be a power of 2
             * optional, default = 256 */
            grid_size: (u32),
            /* number of steps which an individual performs on the GPU without supervision
             *  -> shorter slices enable quicker termination of single individuals
             *  -> longer slices incur less overhead from kernel launches
             * optional, default = 200 */
            step_slice: (0 < u64),
            /* selection of the mode of the individual deduplication cache
             * optional, default = Relative(factor: 2.0) */
            dedup_cache: (
                /* cache has an absolute maximum capacity */
              | Absolute(
                    /* absolute capacity of the cache */
                    capacity: (0 < usize),
                )
                /* cache has a relative maximum capacity */
              | Relative(
                    /* capacity is the initial number of individuals * factor */
                    factor: (0.0 < f64),
                )
                /* individual deduplication is disabled */
              | None
            ),
            /* selection of the mode in which the simulation is parallelised
             * optional, default = Monolithic(event_slice: 1000000) */
            parallelism_mode: (
                /* no partitioning occurs
                 * invalid when the simulation is internally parallelised */
              | Monolithic(
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
                /* partition the initial set of individuals
                 * no individuals are migrated between partitions
                 * does not coordinate with other partitions
                 * only simulates a single partition which does not communicate at all
                 * invalid when the simulation is internally parallelised */
              | IsolatedIndividuals(
                    /* selection of the single partition that will be simulated */
                    partition: Partition(
                        rank: (u32 < partitions),
                        partitions: (0 < u32),
                    ),
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
                /* partition the original set of individuals
                 * optimised for intra-partition spatial locality
                 * no individuals are migrated between partitions
                 * does not coordinate with other partitions
                 * only simulates a single partition which does not communicate at all
                 * invalid when the simulation is internally parallelised */
              | IsolatedLandscape(
                    /* selection of the single partition that will be simulated */
                    partition: Partition(
                        rank: (u32 < partitions),
                        partitions: (0 < u32),
                    ),
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
            )
        )
        /* independent; simulates each individual without knowledge of others; CPU-based */
      | Independent(
            /* simulation time between random number generator repriming
             *  -> lower deltas require fewer draws to pick the time of the next event
             *  -> higher deltas require fewer reprimings to pick the time of the next event
             * WARNING: changes the result of a particular simulation run
             * optional, default = 1.0 */
            delta_t: (0.0 < f64),
            /* number of steps which an individual performs on the CPU without supervision
             *  -> shorter slices enable quicker termination of single individuals
             * optional, default = 10 */
            step_slice: (0 < u64),
            /* Selection of the mode of the individual deduplication cache
             * optional, default = Relative(factor: 2.0) */
            dedup_cache: (
                /* cache has an absolute maximum capacity */
              | Absolute(
                    /* absolute capacity of the cache */
                    capacity: (0 < usize),
                )
                /* cache has a relative maximum capacity */
              | Relative(
                    /* capacity is the initial number of individuals * factor */
                    factor: (0.0 < f64),
                )
                /* individual deduplication is disabled */
              | None
            ),
            /* selection of the mode in which the simulation is parallelised
             * optional, dynamic default = Monolithic(event_slice: 1000000) / Individuals */
            parallelism_mode: (
                /* no partitioning occurs
                 * invalid when the simulation is internally parallelised */
              | Monolithic(
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
                /* partition the initial set of individuals
                 * no individuals are migrated between partitions
                 * does not coordinate with other partitions
                 * only simulates a single partition which does not communicate at all
                 * invalid when the simulation is internally parallelised */
              | IsolatedIndividuals(
                    /* selection of the single partition that will be simulated */
                    partition: Partition(
                        rank: (u32 < partitions),
                        partitions: (0 < u32),
                    ),
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
                /* partition the original set of individuals
                 * optimised for intra-partition spatial locality
                 * no individuals are migrated between partitions
                 * does not coordinate with other partitions
                 * only simulates a single partition which does not communicate at all
                 * invalid when the simulation is internally parallelised */
              | IsolatedLandscape(
                    /* selection of the single partition that will be simulated */
                    partition: Partition(
                        rank: (u32 < partitions),
                        partitions: (0 < u32),
                    ),
                    /* average number of events between flushing the event buffer */
                    event_slice: (0 < usize),
                )
                /* partition the initial set of individuals
                 * no individuals are migrated between partitions
                 * automatically coordinates between partitions
                 * communication between partitions only occurs for progress measuring
                 * invalid when the simulation is NOT internally parallelised */
              | Individuals
                /* partition the landscape
                 * individuals naturally migrate between partitions
                 * automatically coordinates between partitions
                 * communication between partitions occurs mostly for migration
                 * invalid when the simulation is NOT internally parallelised */
              | Landscape
                /* like Landscape but only migrates individuals at random intervals
                 *  to minimise the communication overhead
                 * invalid when the simulation is NOT internally parallelised */
              | Probabilistic(
                    /* probability with which a migration incurs communication
                     * otherwise the individual just stays in its current partition */
                    communication: (0.0 <= f64 <= 1.0),
              )
            )
        )
    ),

    /* selection of the scenario which will be simulated */
    scenario: (
        /* spatially explicit scenario using habitat and dispersal maps */
      | SpatiallyExplicit(
          /* file path to a (WxH) TIFF file storing grayscale u32 habitat values */
          habitat: (PathBuf),
          /* file path to a (WxH x WxH) TIFF file storing grayscale f64 dispersal weights
           * the ith row of the image stores dispersal from the habitat cell (i % W, i / W) */
          dispersal: (PathBuf),
          /* selection of the turnover rate source
           * optional, default = Uniform(0.5) */
          turnover: (
              /* Uniform positive turnover rate */
            | Uniform(0.0 < f64),
              /* file path to (WxH) TIFF file storing grayscale f64 turnover rates */
            | Map(PathBuf),
          ),
          /* selection of the map loading mode
           * optional, default = OffByOne */
          mode: (
              /* Fixes GDAL no-data value, habitat 0/1 rounding errors, zero turnover habitat
               *  and dispersal from/to non-habitat */
            | FixMe
              /* Fixes GDAL no-data value and habitat 0/1 rounding errors */
            | OffByOne
              /* Does not fix any habitat-dispersal discrepancies */
            | Strict
          ),
      )
        /* non-spatial scenario with homogeneous dispersal and a community size of
         *  (area.0 * area.1 * deme) */
      | NonSpatial(
            /* width and height of the non-spatial landscape */
            area: (u32, u32),
            /* number of individuals which can live at the same habitat location */
            deme: (u32),
            /* if true, uses the InMemory scenario to emulate the NonSpatial scenario
             * optional, default = false */
            spatial: (bool),
        )
        /* spatially-implicit scenario with a non-spatial local and a non-spatial meta community
         *  and dynamic migration from the meta to the local community */
      | SpatiallyImplicit(
            /* width and height of the non-spatial local landscape */
            local_area: (u32, u32),
            /* number of individuals which can live at the same local habitat location */
            local_deme: (u32),
            /* width and height of the non-spatial meta landscape */
            meta_area: (u32, u32),
            /* number of individuals which can live at the same meta habitat location */
            meta_deme: (u32),
            /* per-individual per-generation probability that the parent of an individual
             *  in the local community migrated from the meta community */
            migration: (0.0 < f64 <= 1.0),
        )
        /* (almost) infinite spatially-explicit scenario with Gaussian distributed dispersal
         *  the entire infinite landscape is habitat but, without loss of generality, has deme 1 */
      | AlmostInfinite(
            /* radius of a circle from which individuals are sampled */
            radius: (u32),
            /* sigma for the Gaussian dispersal kernel N(0, sigma^2) */
            sigma: (0.0 <= f64),
        )
    ),

    /* selection of the event persistence strategy
     * optional, default = None */
    log: (
        /* file path to a directory in which a log of all events will be saved
         * implies that events will not be reported live, but can be replayed later
         * required when the simulation is internally parellelised */
      | Some(PathBuf)
        /* equivalent to Some(PathBuf) */
      | (PathBuf)
        /* events are reported live but not persisted
         * invalid when the simulation is internally parallelised */
      | None
    ),

    /* selection of the reporters which will analyse the simulation
     *
     * the selection will determine which events are produced during the simulation
     *  and stored in the log, if one is specified */
    reporters: [
        /* loads a single dynamic reporter plugin */
        Plugin(
            /* path to the dynamic library which defined the plugin */
            library: (PathBuf),
            /* selection of the reporters defined by this plugin */
            reporters: [
                /* initialisation of a single reporter named 'ReporterName'
                 *  with arguments arg.. */
                ReporterName(args..)
            ]
        )
    ]
)
